// Code generated by MockGen. DO NOT EDIT.
// Source: watch-informer/api (interfaces: WatchService_WatchServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	api "watch-informer/api"

	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
)

// MockWatchService_WatchServer is a mock of WatchService_WatchServer interface.
type MockWatchService_WatchServer struct {
	ctrl     *gomock.Controller
	recorder *MockWatchService_WatchServerMockRecorder
}

// MockWatchService_WatchServerMockRecorder is the mock recorder for MockWatchService_WatchServer.
type MockWatchService_WatchServerMockRecorder struct {
	mock *MockWatchService_WatchServer
}

// NewMockWatchService_WatchServer creates a new mock instance.
func NewMockWatchService_WatchServer(ctrl *gomock.Controller) *MockWatchService_WatchServer {
	mock := &MockWatchService_WatchServer{ctrl: ctrl}
	mock.recorder = &MockWatchService_WatchServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatchService_WatchServer) EXPECT() *MockWatchService_WatchServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockWatchService_WatchServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockWatchService_WatchServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockWatchService_WatchServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m *MockWatchService_WatchServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockWatchService_WatchServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockWatchService_WatchServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockWatchService_WatchServer) Send(arg0 *api.WatchResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockWatchService_WatchServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockWatchService_WatchServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockWatchService_WatchServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockWatchService_WatchServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockWatchService_WatchServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockWatchService_WatchServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockWatchService_WatchServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockWatchService_WatchServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockWatchService_WatchServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockWatchService_WatchServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockWatchService_WatchServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockWatchService_WatchServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockWatchService_WatchServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockWatchService_WatchServer)(nil).SetTrailer), arg0)
}
