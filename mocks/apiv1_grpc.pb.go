// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/apiv1_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	api "github.com/cmwylie19/watch-informer/api"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockWatchServiceClient is a mock of WatchServiceClient interface.
type MockWatchServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockWatchServiceClientMockRecorder
}

// MockWatchServiceClientMockRecorder is the mock recorder for MockWatchServiceClient.
type MockWatchServiceClientMockRecorder struct {
	mock *MockWatchServiceClient
}

// NewMockWatchServiceClient creates a new mock instance.
func NewMockWatchServiceClient(ctrl *gomock.Controller) *MockWatchServiceClient {
	mock := &MockWatchServiceClient{ctrl: ctrl}
	mock.recorder = &MockWatchServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatchServiceClient) EXPECT() *MockWatchServiceClientMockRecorder {
	return m.recorder
}

// Watch mocks base method.
func (m *MockWatchServiceClient) Watch(ctx context.Context, in *api.WatchRequest, opts ...grpc.CallOption) (api.WatchService_WatchClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(api.WatchService_WatchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockWatchServiceClientMockRecorder) Watch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockWatchServiceClient)(nil).Watch), varargs...)
}

// MockWatchService_WatchClient is a mock of WatchService_WatchClient interface.
type MockWatchService_WatchClient struct {
	ctrl     *gomock.Controller
	recorder *MockWatchService_WatchClientMockRecorder
}

// MockWatchService_WatchClientMockRecorder is the mock recorder for MockWatchService_WatchClient.
type MockWatchService_WatchClientMockRecorder struct {
	mock *MockWatchService_WatchClient
}

// NewMockWatchService_WatchClient creates a new mock instance.
func NewMockWatchService_WatchClient(ctrl *gomock.Controller) *MockWatchService_WatchClient {
	mock := &MockWatchService_WatchClient{ctrl: ctrl}
	mock.recorder = &MockWatchService_WatchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatchService_WatchClient) EXPECT() *MockWatchService_WatchClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockWatchService_WatchClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockWatchService_WatchClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockWatchService_WatchClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockWatchService_WatchClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockWatchService_WatchClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockWatchService_WatchClient)(nil).Context))
}

// Header mocks base method.
func (m *MockWatchService_WatchClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockWatchService_WatchClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockWatchService_WatchClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockWatchService_WatchClient) Recv() (*api.WatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*api.WatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockWatchService_WatchClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockWatchService_WatchClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockWatchService_WatchClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockWatchService_WatchClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockWatchService_WatchClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockWatchService_WatchClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockWatchService_WatchClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockWatchService_WatchClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockWatchService_WatchClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockWatchService_WatchClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockWatchService_WatchClient)(nil).Trailer))
}

// MockWatchServiceServer is a mock of WatchServiceServer interface.
type MockWatchServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockWatchServiceServerMockRecorder
}

// MockWatchServiceServerMockRecorder is the mock recorder for MockWatchServiceServer.
type MockWatchServiceServerMockRecorder struct {
	mock *MockWatchServiceServer
}

// NewMockWatchServiceServer creates a new mock instance.
func NewMockWatchServiceServer(ctrl *gomock.Controller) *MockWatchServiceServer {
	mock := &MockWatchServiceServer{ctrl: ctrl}
	mock.recorder = &MockWatchServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatchServiceServer) EXPECT() *MockWatchServiceServerMockRecorder {
	return m.recorder
}

// Watch mocks base method.
func (m *MockWatchServiceServer) Watch(arg0 *api.WatchRequest, arg1 api.WatchService_WatchServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockWatchServiceServerMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockWatchServiceServer)(nil).Watch), arg0, arg1)
}

// mustEmbedUnimplementedWatchServiceServer mocks base method.
func (m *MockWatchServiceServer) mustEmbedUnimplementedWatchServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWatchServiceServer")
}

// mustEmbedUnimplementedWatchServiceServer indicates an expected call of mustEmbedUnimplementedWatchServiceServer.
func (mr *MockWatchServiceServerMockRecorder) mustEmbedUnimplementedWatchServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWatchServiceServer", reflect.TypeOf((*MockWatchServiceServer)(nil).mustEmbedUnimplementedWatchServiceServer))
}

// MockUnsafeWatchServiceServer is a mock of UnsafeWatchServiceServer interface.
type MockUnsafeWatchServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeWatchServiceServerMockRecorder
}

// MockUnsafeWatchServiceServerMockRecorder is the mock recorder for MockUnsafeWatchServiceServer.
type MockUnsafeWatchServiceServerMockRecorder struct {
	mock *MockUnsafeWatchServiceServer
}

// NewMockUnsafeWatchServiceServer creates a new mock instance.
func NewMockUnsafeWatchServiceServer(ctrl *gomock.Controller) *MockUnsafeWatchServiceServer {
	mock := &MockUnsafeWatchServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeWatchServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeWatchServiceServer) EXPECT() *MockUnsafeWatchServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedWatchServiceServer mocks base method.
func (m *MockUnsafeWatchServiceServer) mustEmbedUnimplementedWatchServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWatchServiceServer")
}

// mustEmbedUnimplementedWatchServiceServer indicates an expected call of mustEmbedUnimplementedWatchServiceServer.
func (mr *MockUnsafeWatchServiceServerMockRecorder) mustEmbedUnimplementedWatchServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWatchServiceServer", reflect.TypeOf((*MockUnsafeWatchServiceServer)(nil).mustEmbedUnimplementedWatchServiceServer))
}

// MockWatchService_WatchServer is a mock of WatchService_WatchServer interface.
type MockWatchService_WatchServer struct {
	ctrl     *gomock.Controller
	recorder *MockWatchService_WatchServerMockRecorder
}

// MockWatchService_WatchServerMockRecorder is the mock recorder for MockWatchService_WatchServer.
type MockWatchService_WatchServerMockRecorder struct {
	mock *MockWatchService_WatchServer
}

// NewMockWatchService_WatchServer creates a new mock instance.
func NewMockWatchService_WatchServer(ctrl *gomock.Controller) *MockWatchService_WatchServer {
	mock := &MockWatchService_WatchServer{ctrl: ctrl}
	mock.recorder = &MockWatchService_WatchServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatchService_WatchServer) EXPECT() *MockWatchService_WatchServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockWatchService_WatchServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockWatchService_WatchServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockWatchService_WatchServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockWatchService_WatchServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockWatchService_WatchServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockWatchService_WatchServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockWatchService_WatchServer) Send(arg0 *api.WatchResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockWatchService_WatchServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockWatchService_WatchServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockWatchService_WatchServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockWatchService_WatchServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockWatchService_WatchServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockWatchService_WatchServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockWatchService_WatchServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockWatchService_WatchServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockWatchService_WatchServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockWatchService_WatchServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockWatchService_WatchServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockWatchService_WatchServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockWatchService_WatchServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockWatchService_WatchServer)(nil).SetTrailer), arg0)
}
